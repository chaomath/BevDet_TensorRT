// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bevdet.proto

#include "bevdet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bevdet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BEVConfig_bevdet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bevdet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetConfig_bevdet_2eproto;
class NetConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetConfig> _instance;
} _NetConfig_default_instance_;
class BEVConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BEVConfig> _instance;
} _BEVConfig_default_instance_;
class BEVDetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BEVDet> _instance;
} _BEVDet_default_instance_;
static void InitDefaultsscc_info_BEVConfig_bevdet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BEVConfig_default_instance_;
    new (ptr) ::BEVConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BEVConfig_bevdet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BEVConfig_bevdet_2eproto}, {
      &scc_info_NetConfig_bevdet_2eproto.base,}};

static void InitDefaultsscc_info_BEVDet_bevdet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BEVDet_default_instance_;
    new (ptr) ::BEVDet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BEVDet_bevdet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BEVDet_bevdet_2eproto}, {
      &scc_info_BEVConfig_bevdet_2eproto.base,}};

static void InitDefaultsscc_info_NetConfig_bevdet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NetConfig_default_instance_;
    new (ptr) ::NetConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetConfig_bevdet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetConfig_bevdet_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bevdet_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bevdet_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bevdet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bevdet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetConfig, input_names_),
  PROTOBUF_FIELD_OFFSET(::NetConfig, output_names_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BEVConfig, engine_file_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, src_height_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, src_width_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, resize_height_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, resize_width_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, input_offset_x_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, input_offset_y_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, input_channel_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, mean_b_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, mean_g_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, mean_r_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, std_b_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, std_g_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, std_r_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, is_bgr_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, confidence_threshold_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, gpu_id_),
  PROTOBUF_FIELD_OFFSET(::BEVConfig, net_config_),
  0,
  2,
  3,
  8,
  9,
  4,
  5,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  7,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::BEVDet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BEVDet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BEVDet, part1_config_),
  PROTOBUF_FIELD_OFFSET(::BEVDet, part2_config_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NetConfig)},
  { 7, 30, sizeof(::BEVConfig)},
  { 48, 55, sizeof(::BEVDet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BEVConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BEVDet_default_instance_),
};

const char descriptor_table_protodef_bevdet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014bevdet.proto\"6\n\tNetConfig\022\023\n\013input_nam"
  "es\030\001 \003(\t\022\024\n\014output_names\030\002 \003(\t\"\306\003\n\tBEVCo"
  "nfig\022$\n\013engine_file\030\001 \001(\t:\017resnet18.engi"
  "ne\022\025\n\nsrc_height\030\002 \001(\r:\0010\022\024\n\tsrc_width\030\003"
  " \001(\r:\0010\022\032\n\rresize_height\030\004 \001(\r:\003256\022\031\n\014r"
  "esize_width\030\005 \001(\r:\003704\022\031\n\016input_offset_x"
  "\030\006 \001(\r:\0010\022\031\n\016input_offset_y\030\007 \001(\r:\0010\022\030\n\r"
  "input_channel\030\010 \001(\r:\0013\022\022\n\006mean_b\030\t \001(\002:\002"
  "95\022\022\n\006mean_g\030\n \001(\002:\00299\022\022\n\006mean_r\030\013 \001(\002:\002"
  "96\022\021\n\005std_b\030\014 \001(\002:\00296\022\021\n\005std_g\030\r \001(\002:\00296"
  "\022\021\n\005std_r\030\016 \001(\002:\00296\022\024\n\006is_bgr\030\017 \001(\010:\004tru"
  "e\022!\n\024confidence_threshold\030\020 \001(\002:\0030.5\022\021\n\006"
  "gpu_id\030\021 \001(\005:\0010\022\036\n\nnet_config\030\022 \001(\0132\n.Ne"
  "tConfig\"L\n\006BEVDet\022 \n\014part1_config\030\001 \001(\0132"
  "\n.BEVConfig\022 \n\014part2_config\030\002 \001(\0132\n.BEVC"
  "onfig"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bevdet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bevdet_2eproto_sccs[3] = {
  &scc_info_BEVConfig_bevdet_2eproto.base,
  &scc_info_BEVDet_bevdet_2eproto.base,
  &scc_info_NetConfig_bevdet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bevdet_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bevdet_2eproto = {
  false, false, descriptor_table_protodef_bevdet_2eproto, "bevdet.proto", 605,
  &descriptor_table_bevdet_2eproto_once, descriptor_table_bevdet_2eproto_sccs, descriptor_table_bevdet_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_bevdet_2eproto::offsets,
  file_level_metadata_bevdet_2eproto, 3, file_level_enum_descriptors_bevdet_2eproto, file_level_service_descriptors_bevdet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bevdet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bevdet_2eproto)), true);

// ===================================================================

class NetConfig::_Internal {
 public:
};

NetConfig::NetConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  input_names_(arena),
  output_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetConfig)
}
NetConfig::NetConfig(const NetConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      input_names_(from.input_names_),
      output_names_(from.output_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetConfig)
}

void NetConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetConfig_bevdet_2eproto.base);
}

NetConfig::~NetConfig() {
  // @@protoc_insertion_point(destructor:NetConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetConfig::ArenaDtor(void* object) {
  NetConfig* _this = reinterpret_cast< NetConfig* >(object);
  (void)_this;
}
void NetConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetConfig& NetConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetConfig_bevdet_2eproto.base);
  return *internal_default_instance();
}


void NetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:NetConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_names_.Clear();
  output_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string input_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetConfig.input_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string output_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NetConfig.output_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_names = 1;
  for (int i = 0, n = this->_internal_input_names_size(); i < n; i++) {
    const auto& s = this->_internal_input_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NetConfig.input_names");
    target = stream->WriteString(1, s, target);
  }

  // repeated string output_names = 2;
  for (int i = 0, n = this->_internal_output_names_size(); i < n; i++) {
    const auto& s = this->_internal_output_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "NetConfig.output_names");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetConfig)
  return target;
}

size_t NetConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(input_names_.size());
  for (int i = 0, n = input_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      input_names_.Get(i));
  }

  // repeated string output_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_names_.size());
  for (int i = 0, n = output_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NetConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetConfig)
    MergeFrom(*source);
  }
}

void NetConfig::MergeFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_names_.MergeFrom(from.input_names_);
  output_names_.MergeFrom(from.output_names_);
}

void NetConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig::CopyFrom(const NetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig::IsInitialized() const {
  return true;
}

void NetConfig::InternalSwap(NetConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_names_.InternalSwap(&other->input_names_);
  output_names_.InternalSwap(&other->output_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BEVConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<BEVConfig>()._has_bits_);
  static void set_has_engine_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_src_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resize_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_resize_width(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_input_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_input_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mean_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mean_g(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mean_r(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_std_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_std_g(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_std_r(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_bgr(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_confidence_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gpu_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::NetConfig& net_config(const BEVConfig* msg);
  static void set_has_net_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::NetConfig&
BEVConfig::_Internal::net_config(const BEVConfig* msg) {
  return *msg->net_config_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString BEVConfig::_i_give_permission_to_break_this_code_default_engine_file_{{{"resnet18.engine", 15}}, {nullptr}};
BEVConfig::BEVConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BEVConfig)
}
BEVConfig::BEVConfig(const BEVConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  engine_file_.UnsafeSetDefault(nullptr);
  if (from._internal_has_engine_file()) {
    engine_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_engine_file(), 
      GetArena());
  }
  if (from._internal_has_net_config()) {
    net_config_ = new ::NetConfig(*from.net_config_);
  } else {
    net_config_ = nullptr;
  }
  ::memcpy(&src_height_, &from.src_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_bgr_) -
    reinterpret_cast<char*>(&src_height_)) + sizeof(is_bgr_));
  // @@protoc_insertion_point(copy_constructor:BEVConfig)
}

void BEVConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BEVConfig_bevdet_2eproto.base);
  engine_file_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&net_config_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gpu_id_) -
      reinterpret_cast<char*>(&net_config_)) + sizeof(gpu_id_));
  confidence_threshold_ = 0.5f;
  resize_height_ = 256u;
  resize_width_ = 704u;
  input_channel_ = 3u;
  mean_b_ = 95;
  mean_g_ = 99;
  mean_r_ = 96;
  std_b_ = 96;
  std_g_ = 96;
  std_r_ = 96;
  is_bgr_ = true;
}

BEVConfig::~BEVConfig() {
  // @@protoc_insertion_point(destructor:BEVConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BEVConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  engine_file_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete net_config_;
}

void BEVConfig::ArenaDtor(void* object) {
  BEVConfig* _this = reinterpret_cast< BEVConfig* >(object);
  (void)_this;
}
void BEVConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BEVConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BEVConfig& BEVConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BEVConfig_bevdet_2eproto.base);
  return *internal_default_instance();
}


void BEVConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BEVConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      engine_file_.ClearToDefault(::BEVConfig::_i_give_permission_to_break_this_code_default_engine_file_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(net_config_ != nullptr);
      net_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&src_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gpu_id_) -
        reinterpret_cast<char*>(&src_height_)) + sizeof(gpu_id_));
    confidence_threshold_ = 0.5f;
  }
  if (cached_has_bits & 0x0000ff00u) {
    resize_height_ = 256u;
    resize_width_ = 704u;
    input_channel_ = 3u;
    mean_b_ = 95;
    mean_g_ = 99;
    mean_r_ = 96;
    std_b_ = 96;
    std_g_ = 96;
  }
  if (cached_has_bits & 0x00030000u) {
    std_r_ = 96;
    is_bgr_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BEVConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string engine_file = 1 [default = "resnet18.engine"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_engine_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BEVConfig.engine_file");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_height = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_src_height(&has_bits);
          src_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 src_width = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_src_width(&has_bits);
          src_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resize_height = 4 [default = 256];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_resize_height(&has_bits);
          resize_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resize_width = 5 [default = 704];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_resize_width(&has_bits);
          resize_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 input_offset_x = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_input_offset_x(&has_bits);
          input_offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 input_offset_y = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_input_offset_y(&has_bits);
          input_offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 input_channel = 8 [default = 3];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_input_channel(&has_bits);
          input_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mean_b = 9 [default = 95];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_mean_b(&has_bits);
          mean_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_g = 10 [default = 99];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_mean_g(&has_bits);
          mean_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mean_r = 11 [default = 96];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_mean_r(&has_bits);
          mean_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_b = 12 [default = 96];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_std_b(&has_bits);
          std_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_g = 13 [default = 96];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_std_g(&has_bits);
          std_g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float std_r = 14 [default = 96];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_std_r(&has_bits);
          std_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_bgr = 15 [default = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_bgr(&has_bits);
          is_bgr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence_threshold = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_confidence_threshold(&has_bits);
          confidence_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 gpu_id = 17 [default = 0];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_gpu_id(&has_bits);
          gpu_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .NetConfig net_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_net_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BEVConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BEVConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string engine_file = 1 [default = "resnet18.engine"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_engine_file().data(), static_cast<int>(this->_internal_engine_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "BEVConfig.engine_file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_engine_file(), target);
  }

  // optional uint32 src_height = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src_height(), target);
  }

  // optional uint32 src_width = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_src_width(), target);
  }

  // optional uint32 resize_height = 4 [default = 256];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resize_height(), target);
  }

  // optional uint32 resize_width = 5 [default = 704];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_resize_width(), target);
  }

  // optional uint32 input_offset_x = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_input_offset_x(), target);
  }

  // optional uint32 input_offset_y = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_input_offset_y(), target);
  }

  // optional uint32 input_channel = 8 [default = 3];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_input_channel(), target);
  }

  // optional float mean_b = 9 [default = 95];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_mean_b(), target);
  }

  // optional float mean_g = 10 [default = 99];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_mean_g(), target);
  }

  // optional float mean_r = 11 [default = 96];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_mean_r(), target);
  }

  // optional float std_b = 12 [default = 96];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_std_b(), target);
  }

  // optional float std_g = 13 [default = 96];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_std_g(), target);
  }

  // optional float std_r = 14 [default = 96];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_std_r(), target);
  }

  // optional bool is_bgr = 15 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_bgr(), target);
  }

  // optional float confidence_threshold = 16 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_confidence_threshold(), target);
  }

  // optional int32 gpu_id = 17 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_gpu_id(), target);
  }

  // optional .NetConfig net_config = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::net_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BEVConfig)
  return target;
}

size_t BEVConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BEVConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string engine_file = 1 [default = "resnet18.engine"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_engine_file());
    }

    // optional .NetConfig net_config = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *net_config_);
    }

    // optional uint32 src_height = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_height());
    }

    // optional uint32 src_width = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_src_width());
    }

    // optional uint32 input_offset_x = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_input_offset_x());
    }

    // optional uint32 input_offset_y = 7 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_input_offset_y());
    }

    // optional int32 gpu_id = 17 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpu_id());
    }

    // optional float confidence_threshold = 16 [default = 0.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 resize_height = 4 [default = 256];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_resize_height());
    }

    // optional uint32 resize_width = 5 [default = 704];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_resize_width());
    }

    // optional uint32 input_channel = 8 [default = 3];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_input_channel());
    }

    // optional float mean_b = 9 [default = 95];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float mean_g = 10 [default = 99];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float mean_r = 11 [default = 96];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float std_b = 12 [default = 96];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float std_g = 13 [default = 96];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float std_r = 14 [default = 96];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional bool is_bgr = 15 [default = true];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BEVConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BEVConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BEVConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BEVConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BEVConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BEVConfig)
    MergeFrom(*source);
  }
}

void BEVConfig::MergeFrom(const BEVConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BEVConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_engine_file(from._internal_engine_file());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_net_config()->::NetConfig::MergeFrom(from._internal_net_config());
    }
    if (cached_has_bits & 0x00000004u) {
      src_height_ = from.src_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      src_width_ = from.src_width_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_offset_x_ = from.input_offset_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      input_offset_y_ = from.input_offset_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpu_id_ = from.gpu_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      confidence_threshold_ = from.confidence_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      resize_height_ = from.resize_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      resize_width_ = from.resize_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      input_channel_ = from.input_channel_;
    }
    if (cached_has_bits & 0x00000800u) {
      mean_b_ = from.mean_b_;
    }
    if (cached_has_bits & 0x00001000u) {
      mean_g_ = from.mean_g_;
    }
    if (cached_has_bits & 0x00002000u) {
      mean_r_ = from.mean_r_;
    }
    if (cached_has_bits & 0x00004000u) {
      std_b_ = from.std_b_;
    }
    if (cached_has_bits & 0x00008000u) {
      std_g_ = from.std_g_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      std_r_ = from.std_r_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_bgr_ = from.is_bgr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BEVConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BEVConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BEVConfig::CopyFrom(const BEVConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BEVConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BEVConfig::IsInitialized() const {
  return true;
}

void BEVConfig::InternalSwap(BEVConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  engine_file_.Swap(&other->engine_file_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BEVConfig, gpu_id_)
      + sizeof(BEVConfig::gpu_id_)
      - PROTOBUF_FIELD_OFFSET(BEVConfig, net_config_)>(
          reinterpret_cast<char*>(&net_config_),
          reinterpret_cast<char*>(&other->net_config_));
  swap(confidence_threshold_, other->confidence_threshold_);
  swap(resize_height_, other->resize_height_);
  swap(resize_width_, other->resize_width_);
  swap(input_channel_, other->input_channel_);
  swap(mean_b_, other->mean_b_);
  swap(mean_g_, other->mean_g_);
  swap(mean_r_, other->mean_r_);
  swap(std_b_, other->std_b_);
  swap(std_g_, other->std_g_);
  swap(std_r_, other->std_r_);
  swap(is_bgr_, other->is_bgr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BEVConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BEVDet::_Internal {
 public:
  using HasBits = decltype(std::declval<BEVDet>()._has_bits_);
  static const ::BEVConfig& part1_config(const BEVDet* msg);
  static void set_has_part1_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::BEVConfig& part2_config(const BEVDet* msg);
  static void set_has_part2_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::BEVConfig&
BEVDet::_Internal::part1_config(const BEVDet* msg) {
  return *msg->part1_config_;
}
const ::BEVConfig&
BEVDet::_Internal::part2_config(const BEVDet* msg) {
  return *msg->part2_config_;
}
BEVDet::BEVDet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BEVDet)
}
BEVDet::BEVDet(const BEVDet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_part1_config()) {
    part1_config_ = new ::BEVConfig(*from.part1_config_);
  } else {
    part1_config_ = nullptr;
  }
  if (from._internal_has_part2_config()) {
    part2_config_ = new ::BEVConfig(*from.part2_config_);
  } else {
    part2_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BEVDet)
}

void BEVDet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BEVDet_bevdet_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&part1_config_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&part2_config_) -
      reinterpret_cast<char*>(&part1_config_)) + sizeof(part2_config_));
}

BEVDet::~BEVDet() {
  // @@protoc_insertion_point(destructor:BEVDet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BEVDet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete part1_config_;
  if (this != internal_default_instance()) delete part2_config_;
}

void BEVDet::ArenaDtor(void* object) {
  BEVDet* _this = reinterpret_cast< BEVDet* >(object);
  (void)_this;
}
void BEVDet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BEVDet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BEVDet& BEVDet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BEVDet_bevdet_2eproto.base);
  return *internal_default_instance();
}


void BEVDet::Clear() {
// @@protoc_insertion_point(message_clear_start:BEVDet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(part1_config_ != nullptr);
      part1_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(part2_config_ != nullptr);
      part2_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BEVDet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .BEVConfig part1_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_part1_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .BEVConfig part2_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_part2_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BEVDet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BEVDet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .BEVConfig part1_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::part1_config(this), target, stream);
  }

  // optional .BEVConfig part2_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::part2_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BEVDet)
  return target;
}

size_t BEVDet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BEVDet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .BEVConfig part1_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *part1_config_);
    }

    // optional .BEVConfig part2_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *part2_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BEVDet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BEVDet)
  GOOGLE_DCHECK_NE(&from, this);
  const BEVDet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BEVDet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BEVDet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BEVDet)
    MergeFrom(*source);
  }
}

void BEVDet::MergeFrom(const BEVDet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BEVDet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_part1_config()->::BEVConfig::MergeFrom(from._internal_part1_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_part2_config()->::BEVConfig::MergeFrom(from._internal_part2_config());
    }
  }
}

void BEVDet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BEVDet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BEVDet::CopyFrom(const BEVDet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BEVDet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BEVDet::IsInitialized() const {
  return true;
}

void BEVDet::InternalSwap(BEVDet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BEVDet, part2_config_)
      + sizeof(BEVDet::part2_config_)
      - PROTOBUF_FIELD_OFFSET(BEVDet, part1_config_)>(
          reinterpret_cast<char*>(&part1_config_),
          reinterpret_cast<char*>(&other->part1_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BEVDet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetConfig* Arena::CreateMaybeMessage< ::NetConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BEVConfig* Arena::CreateMaybeMessage< ::BEVConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BEVConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::BEVDet* Arena::CreateMaybeMessage< ::BEVDet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BEVDet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
