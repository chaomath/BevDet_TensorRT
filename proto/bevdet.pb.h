// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bevdet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bevdet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bevdet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bevdet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bevdet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bevdet_2eproto;
class BEVConfig;
class BEVConfigDefaultTypeInternal;
extern BEVConfigDefaultTypeInternal _BEVConfig_default_instance_;
class BEVDet;
class BEVDetDefaultTypeInternal;
extern BEVDetDefaultTypeInternal _BEVDet_default_instance_;
class NetConfig;
class NetConfigDefaultTypeInternal;
extern NetConfigDefaultTypeInternal _NetConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BEVConfig* Arena::CreateMaybeMessage<::BEVConfig>(Arena*);
template<> ::BEVDet* Arena::CreateMaybeMessage<::BEVDet>(Arena*);
template<> ::NetConfig* Arena::CreateMaybeMessage<::NetConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NetConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetConfig) */ {
 public:
  inline NetConfig() : NetConfig(nullptr) {}
  virtual ~NetConfig();

  NetConfig(const NetConfig& from);
  NetConfig(NetConfig&& from) noexcept
    : NetConfig() {
    *this = ::std::move(from);
  }

  inline NetConfig& operator=(const NetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetConfig& operator=(NetConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetConfig& default_instance();

  static inline const NetConfig* internal_default_instance() {
    return reinterpret_cast<const NetConfig*>(
               &_NetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetConfig& a, NetConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NetConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetConfig* New() const final {
    return CreateMaybeMessage<NetConfig>(nullptr);
  }

  NetConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetConfig& from);
  void MergeFrom(const NetConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetConfig";
  }
  protected:
  explicit NetConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bevdet_2eproto);
    return ::descriptor_table_bevdet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputNamesFieldNumber = 1,
    kOutputNamesFieldNumber = 2,
  };
  // repeated string input_names = 1;
  int input_names_size() const;
  private:
  int _internal_input_names_size() const;
  public:
  void clear_input_names();
  const std::string& input_names(int index) const;
  std::string* mutable_input_names(int index);
  void set_input_names(int index, const std::string& value);
  void set_input_names(int index, std::string&& value);
  void set_input_names(int index, const char* value);
  void set_input_names(int index, const char* value, size_t size);
  std::string* add_input_names();
  void add_input_names(const std::string& value);
  void add_input_names(std::string&& value);
  void add_input_names(const char* value);
  void add_input_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_names();
  private:
  const std::string& _internal_input_names(int index) const;
  std::string* _internal_add_input_names();
  public:

  // repeated string output_names = 2;
  int output_names_size() const;
  private:
  int _internal_output_names_size() const;
  public:
  void clear_output_names();
  const std::string& output_names(int index) const;
  std::string* mutable_output_names(int index);
  void set_output_names(int index, const std::string& value);
  void set_output_names(int index, std::string&& value);
  void set_output_names(int index, const char* value);
  void set_output_names(int index, const char* value, size_t size);
  std::string* add_output_names();
  void add_output_names(const std::string& value);
  void add_output_names(std::string&& value);
  void add_output_names(const char* value);
  void add_output_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_names();
  private:
  const std::string& _internal_output_names(int index) const;
  std::string* _internal_add_output_names();
  public:

  // @@protoc_insertion_point(class_scope:NetConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bevdet_2eproto;
};
// -------------------------------------------------------------------

class BEVConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BEVConfig) */ {
 public:
  inline BEVConfig() : BEVConfig(nullptr) {}
  virtual ~BEVConfig();

  BEVConfig(const BEVConfig& from);
  BEVConfig(BEVConfig&& from) noexcept
    : BEVConfig() {
    *this = ::std::move(from);
  }

  inline BEVConfig& operator=(const BEVConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BEVConfig& operator=(BEVConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BEVConfig& default_instance();

  static inline const BEVConfig* internal_default_instance() {
    return reinterpret_cast<const BEVConfig*>(
               &_BEVConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BEVConfig& a, BEVConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BEVConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BEVConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BEVConfig* New() const final {
    return CreateMaybeMessage<BEVConfig>(nullptr);
  }

  BEVConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BEVConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BEVConfig& from);
  void MergeFrom(const BEVConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BEVConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BEVConfig";
  }
  protected:
  explicit BEVConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bevdet_2eproto);
    return ::descriptor_table_bevdet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEngineFileFieldNumber = 1,
    kNetConfigFieldNumber = 18,
    kSrcHeightFieldNumber = 2,
    kSrcWidthFieldNumber = 3,
    kInputOffsetXFieldNumber = 6,
    kInputOffsetYFieldNumber = 7,
    kGpuIdFieldNumber = 17,
    kConfidenceThresholdFieldNumber = 16,
    kResizeHeightFieldNumber = 4,
    kResizeWidthFieldNumber = 5,
    kInputChannelFieldNumber = 8,
    kMeanBFieldNumber = 9,
    kMeanGFieldNumber = 10,
    kMeanRFieldNumber = 11,
    kStdBFieldNumber = 12,
    kStdGFieldNumber = 13,
    kStdRFieldNumber = 14,
    kIsBgrFieldNumber = 15,
  };
  // optional string engine_file = 1 [default = "resnet18.engine"];
  bool has_engine_file() const;
  private:
  bool _internal_has_engine_file() const;
  public:
  void clear_engine_file();
  const std::string& engine_file() const;
  void set_engine_file(const std::string& value);
  void set_engine_file(std::string&& value);
  void set_engine_file(const char* value);
  void set_engine_file(const char* value, size_t size);
  std::string* mutable_engine_file();
  std::string* release_engine_file();
  void set_allocated_engine_file(std::string* engine_file);
  private:
  const std::string& _internal_engine_file() const;
  void _internal_set_engine_file(const std::string& value);
  std::string* _internal_mutable_engine_file();
  public:

  // optional .NetConfig net_config = 18;
  bool has_net_config() const;
  private:
  bool _internal_has_net_config() const;
  public:
  void clear_net_config();
  const ::NetConfig& net_config() const;
  ::NetConfig* release_net_config();
  ::NetConfig* mutable_net_config();
  void set_allocated_net_config(::NetConfig* net_config);
  private:
  const ::NetConfig& _internal_net_config() const;
  ::NetConfig* _internal_mutable_net_config();
  public:
  void unsafe_arena_set_allocated_net_config(
      ::NetConfig* net_config);
  ::NetConfig* unsafe_arena_release_net_config();

  // optional uint32 src_height = 2 [default = 0];
  bool has_src_height() const;
  private:
  bool _internal_has_src_height() const;
  public:
  void clear_src_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_height() const;
  void set_src_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_height() const;
  void _internal_set_src_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_width = 3 [default = 0];
  bool has_src_width() const;
  private:
  bool _internal_has_src_width() const;
  public:
  void clear_src_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_width() const;
  void set_src_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_width() const;
  void _internal_set_src_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 input_offset_x = 6 [default = 0];
  bool has_input_offset_x() const;
  private:
  bool _internal_has_input_offset_x() const;
  public:
  void clear_input_offset_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_x() const;
  void set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_offset_x() const;
  void _internal_set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 input_offset_y = 7 [default = 0];
  bool has_input_offset_y() const;
  private:
  bool _internal_has_input_offset_y() const;
  public:
  void clear_input_offset_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_y() const;
  void set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_offset_y() const;
  void _internal_set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 gpu_id = 17 [default = 0];
  bool has_gpu_id() const;
  private:
  bool _internal_has_gpu_id() const;
  public:
  void clear_gpu_id();
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id() const;
  void set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpu_id() const;
  void _internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float confidence_threshold = 16 [default = 0.5];
  bool has_confidence_threshold() const;
  private:
  bool _internal_has_confidence_threshold() const;
  public:
  void clear_confidence_threshold();
  float confidence_threshold() const;
  void set_confidence_threshold(float value);
  private:
  float _internal_confidence_threshold() const;
  void _internal_set_confidence_threshold(float value);
  public:

  // optional uint32 resize_height = 4 [default = 256];
  bool has_resize_height() const;
  private:
  bool _internal_has_resize_height() const;
  public:
  void clear_resize_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 resize_height() const;
  void set_resize_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resize_height() const;
  void _internal_set_resize_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 resize_width = 5 [default = 704];
  bool has_resize_width() const;
  private:
  bool _internal_has_resize_width() const;
  public:
  void clear_resize_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 resize_width() const;
  void set_resize_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resize_width() const;
  void _internal_set_resize_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 input_channel = 8 [default = 3];
  bool has_input_channel() const;
  private:
  bool _internal_has_input_channel() const;
  public:
  void clear_input_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel() const;
  void set_input_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_input_channel() const;
  void _internal_set_input_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float mean_b = 9 [default = 95];
  bool has_mean_b() const;
  private:
  bool _internal_has_mean_b() const;
  public:
  void clear_mean_b();
  float mean_b() const;
  void set_mean_b(float value);
  private:
  float _internal_mean_b() const;
  void _internal_set_mean_b(float value);
  public:

  // optional float mean_g = 10 [default = 99];
  bool has_mean_g() const;
  private:
  bool _internal_has_mean_g() const;
  public:
  void clear_mean_g();
  float mean_g() const;
  void set_mean_g(float value);
  private:
  float _internal_mean_g() const;
  void _internal_set_mean_g(float value);
  public:

  // optional float mean_r = 11 [default = 96];
  bool has_mean_r() const;
  private:
  bool _internal_has_mean_r() const;
  public:
  void clear_mean_r();
  float mean_r() const;
  void set_mean_r(float value);
  private:
  float _internal_mean_r() const;
  void _internal_set_mean_r(float value);
  public:

  // optional float std_b = 12 [default = 96];
  bool has_std_b() const;
  private:
  bool _internal_has_std_b() const;
  public:
  void clear_std_b();
  float std_b() const;
  void set_std_b(float value);
  private:
  float _internal_std_b() const;
  void _internal_set_std_b(float value);
  public:

  // optional float std_g = 13 [default = 96];
  bool has_std_g() const;
  private:
  bool _internal_has_std_g() const;
  public:
  void clear_std_g();
  float std_g() const;
  void set_std_g(float value);
  private:
  float _internal_std_g() const;
  void _internal_set_std_g(float value);
  public:

  // optional float std_r = 14 [default = 96];
  bool has_std_r() const;
  private:
  bool _internal_has_std_r() const;
  public:
  void clear_std_r();
  float std_r() const;
  void set_std_r(float value);
  private:
  float _internal_std_r() const;
  void _internal_set_std_r(float value);
  public:

  // optional bool is_bgr = 15 [default = true];
  bool has_is_bgr() const;
  private:
  bool _internal_has_is_bgr() const;
  public:
  void clear_is_bgr();
  bool is_bgr() const;
  void set_is_bgr(bool value);
  private:
  bool _internal_is_bgr() const;
  void _internal_set_is_bgr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BEVConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_engine_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_file_;
  ::NetConfig* net_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_offset_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpu_id_;
  float confidence_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resize_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resize_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_channel_;
  float mean_b_;
  float mean_g_;
  float mean_r_;
  float std_b_;
  float std_g_;
  float std_r_;
  bool is_bgr_;
  friend struct ::TableStruct_bevdet_2eproto;
};
// -------------------------------------------------------------------

class BEVDet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BEVDet) */ {
 public:
  inline BEVDet() : BEVDet(nullptr) {}
  virtual ~BEVDet();

  BEVDet(const BEVDet& from);
  BEVDet(BEVDet&& from) noexcept
    : BEVDet() {
    *this = ::std::move(from);
  }

  inline BEVDet& operator=(const BEVDet& from) {
    CopyFrom(from);
    return *this;
  }
  inline BEVDet& operator=(BEVDet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BEVDet& default_instance();

  static inline const BEVDet* internal_default_instance() {
    return reinterpret_cast<const BEVDet*>(
               &_BEVDet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BEVDet& a, BEVDet& b) {
    a.Swap(&b);
  }
  inline void Swap(BEVDet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BEVDet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BEVDet* New() const final {
    return CreateMaybeMessage<BEVDet>(nullptr);
  }

  BEVDet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BEVDet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BEVDet& from);
  void MergeFrom(const BEVDet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BEVDet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BEVDet";
  }
  protected:
  explicit BEVDet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bevdet_2eproto);
    return ::descriptor_table_bevdet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPart1ConfigFieldNumber = 1,
    kPart2ConfigFieldNumber = 2,
  };
  // optional .BEVConfig part1_config = 1;
  bool has_part1_config() const;
  private:
  bool _internal_has_part1_config() const;
  public:
  void clear_part1_config();
  const ::BEVConfig& part1_config() const;
  ::BEVConfig* release_part1_config();
  ::BEVConfig* mutable_part1_config();
  void set_allocated_part1_config(::BEVConfig* part1_config);
  private:
  const ::BEVConfig& _internal_part1_config() const;
  ::BEVConfig* _internal_mutable_part1_config();
  public:
  void unsafe_arena_set_allocated_part1_config(
      ::BEVConfig* part1_config);
  ::BEVConfig* unsafe_arena_release_part1_config();

  // optional .BEVConfig part2_config = 2;
  bool has_part2_config() const;
  private:
  bool _internal_has_part2_config() const;
  public:
  void clear_part2_config();
  const ::BEVConfig& part2_config() const;
  ::BEVConfig* release_part2_config();
  ::BEVConfig* mutable_part2_config();
  void set_allocated_part2_config(::BEVConfig* part2_config);
  private:
  const ::BEVConfig& _internal_part2_config() const;
  ::BEVConfig* _internal_mutable_part2_config();
  public:
  void unsafe_arena_set_allocated_part2_config(
      ::BEVConfig* part2_config);
  ::BEVConfig* unsafe_arena_release_part2_config();

  // @@protoc_insertion_point(class_scope:BEVDet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::BEVConfig* part1_config_;
  ::BEVConfig* part2_config_;
  friend struct ::TableStruct_bevdet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetConfig

// repeated string input_names = 1;
inline int NetConfig::_internal_input_names_size() const {
  return input_names_.size();
}
inline int NetConfig::input_names_size() const {
  return _internal_input_names_size();
}
inline void NetConfig::clear_input_names() {
  input_names_.Clear();
}
inline std::string* NetConfig::add_input_names() {
  // @@protoc_insertion_point(field_add_mutable:NetConfig.input_names)
  return _internal_add_input_names();
}
inline const std::string& NetConfig::_internal_input_names(int index) const {
  return input_names_.Get(index);
}
inline const std::string& NetConfig::input_names(int index) const {
  // @@protoc_insertion_point(field_get:NetConfig.input_names)
  return _internal_input_names(index);
}
inline std::string* NetConfig::mutable_input_names(int index) {
  // @@protoc_insertion_point(field_mutable:NetConfig.input_names)
  return input_names_.Mutable(index);
}
inline void NetConfig::set_input_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NetConfig.input_names)
  input_names_.Mutable(index)->assign(value);
}
inline void NetConfig::set_input_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NetConfig.input_names)
  input_names_.Mutable(index)->assign(std::move(value));
}
inline void NetConfig::set_input_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetConfig.input_names)
}
inline void NetConfig::set_input_names(int index, const char* value, size_t size) {
  input_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetConfig.input_names)
}
inline std::string* NetConfig::_internal_add_input_names() {
  return input_names_.Add();
}
inline void NetConfig::add_input_names(const std::string& value) {
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetConfig.input_names)
}
inline void NetConfig::add_input_names(std::string&& value) {
  input_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetConfig.input_names)
}
inline void NetConfig::add_input_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  input_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetConfig.input_names)
}
inline void NetConfig::add_input_names(const char* value, size_t size) {
  input_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetConfig.input_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetConfig::input_names() const {
  // @@protoc_insertion_point(field_list:NetConfig.input_names)
  return input_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetConfig::mutable_input_names() {
  // @@protoc_insertion_point(field_mutable_list:NetConfig.input_names)
  return &input_names_;
}

// repeated string output_names = 2;
inline int NetConfig::_internal_output_names_size() const {
  return output_names_.size();
}
inline int NetConfig::output_names_size() const {
  return _internal_output_names_size();
}
inline void NetConfig::clear_output_names() {
  output_names_.Clear();
}
inline std::string* NetConfig::add_output_names() {
  // @@protoc_insertion_point(field_add_mutable:NetConfig.output_names)
  return _internal_add_output_names();
}
inline const std::string& NetConfig::_internal_output_names(int index) const {
  return output_names_.Get(index);
}
inline const std::string& NetConfig::output_names(int index) const {
  // @@protoc_insertion_point(field_get:NetConfig.output_names)
  return _internal_output_names(index);
}
inline std::string* NetConfig::mutable_output_names(int index) {
  // @@protoc_insertion_point(field_mutable:NetConfig.output_names)
  return output_names_.Mutable(index);
}
inline void NetConfig::set_output_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:NetConfig.output_names)
  output_names_.Mutable(index)->assign(value);
}
inline void NetConfig::set_output_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:NetConfig.output_names)
  output_names_.Mutable(index)->assign(std::move(value));
}
inline void NetConfig::set_output_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NetConfig.output_names)
}
inline void NetConfig::set_output_names(int index, const char* value, size_t size) {
  output_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NetConfig.output_names)
}
inline std::string* NetConfig::_internal_add_output_names() {
  return output_names_.Add();
}
inline void NetConfig::add_output_names(const std::string& value) {
  output_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NetConfig.output_names)
}
inline void NetConfig::add_output_names(std::string&& value) {
  output_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NetConfig.output_names)
}
inline void NetConfig::add_output_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NetConfig.output_names)
}
inline void NetConfig::add_output_names(const char* value, size_t size) {
  output_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NetConfig.output_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetConfig::output_names() const {
  // @@protoc_insertion_point(field_list:NetConfig.output_names)
  return output_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetConfig::mutable_output_names() {
  // @@protoc_insertion_point(field_mutable_list:NetConfig.output_names)
  return &output_names_;
}

// -------------------------------------------------------------------

// BEVConfig

// optional string engine_file = 1 [default = "resnet18.engine"];
inline bool BEVConfig::_internal_has_engine_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BEVConfig::has_engine_file() const {
  return _internal_has_engine_file();
}
inline void BEVConfig::clear_engine_file() {
  engine_file_.ClearToDefault(::BEVConfig::_i_give_permission_to_break_this_code_default_engine_file_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BEVConfig::engine_file() const {
  // @@protoc_insertion_point(field_get:BEVConfig.engine_file)
  if (engine_file_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_engine_file_.get();
  return _internal_engine_file();
}
inline void BEVConfig::set_engine_file(const std::string& value) {
  _internal_set_engine_file(value);
  // @@protoc_insertion_point(field_set:BEVConfig.engine_file)
}
inline std::string* BEVConfig::mutable_engine_file() {
  // @@protoc_insertion_point(field_mutable:BEVConfig.engine_file)
  return _internal_mutable_engine_file();
}
inline const std::string& BEVConfig::_internal_engine_file() const {
  return engine_file_.Get();
}
inline void BEVConfig::_internal_set_engine_file(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  engine_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void BEVConfig::set_engine_file(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  engine_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BEVConfig.engine_file)
}
inline void BEVConfig::set_engine_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  engine_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BEVConfig.engine_file)
}
inline void BEVConfig::set_engine_file(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  engine_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BEVConfig.engine_file)
}
inline std::string* BEVConfig::_internal_mutable_engine_file() {
  _has_bits_[0] |= 0x00000001u;
  return engine_file_.Mutable(::BEVConfig::_i_give_permission_to_break_this_code_default_engine_file_, GetArena());
}
inline std::string* BEVConfig::release_engine_file() {
  // @@protoc_insertion_point(field_release:BEVConfig.engine_file)
  if (!_internal_has_engine_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return engine_file_.ReleaseNonDefault(nullptr, GetArena());
}
inline void BEVConfig::set_allocated_engine_file(std::string* engine_file) {
  if (engine_file != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  engine_file_.SetAllocated(nullptr, engine_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BEVConfig.engine_file)
}

// optional uint32 src_height = 2 [default = 0];
inline bool BEVConfig::_internal_has_src_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BEVConfig::has_src_height() const {
  return _internal_has_src_height();
}
inline void BEVConfig::clear_src_height() {
  src_height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_src_height() const {
  return src_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::src_height() const {
  // @@protoc_insertion_point(field_get:BEVConfig.src_height)
  return _internal_src_height();
}
inline void BEVConfig::_internal_set_src_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  src_height_ = value;
}
inline void BEVConfig::set_src_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_height(value);
  // @@protoc_insertion_point(field_set:BEVConfig.src_height)
}

// optional uint32 src_width = 3 [default = 0];
inline bool BEVConfig::_internal_has_src_width() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BEVConfig::has_src_width() const {
  return _internal_has_src_width();
}
inline void BEVConfig::clear_src_width() {
  src_width_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_src_width() const {
  return src_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::src_width() const {
  // @@protoc_insertion_point(field_get:BEVConfig.src_width)
  return _internal_src_width();
}
inline void BEVConfig::_internal_set_src_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  src_width_ = value;
}
inline void BEVConfig::set_src_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_width(value);
  // @@protoc_insertion_point(field_set:BEVConfig.src_width)
}

// optional uint32 resize_height = 4 [default = 256];
inline bool BEVConfig::_internal_has_resize_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BEVConfig::has_resize_height() const {
  return _internal_has_resize_height();
}
inline void BEVConfig::clear_resize_height() {
  resize_height_ = 256u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_resize_height() const {
  return resize_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::resize_height() const {
  // @@protoc_insertion_point(field_get:BEVConfig.resize_height)
  return _internal_resize_height();
}
inline void BEVConfig::_internal_set_resize_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  resize_height_ = value;
}
inline void BEVConfig::set_resize_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resize_height(value);
  // @@protoc_insertion_point(field_set:BEVConfig.resize_height)
}

// optional uint32 resize_width = 5 [default = 704];
inline bool BEVConfig::_internal_has_resize_width() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BEVConfig::has_resize_width() const {
  return _internal_has_resize_width();
}
inline void BEVConfig::clear_resize_width() {
  resize_width_ = 704u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_resize_width() const {
  return resize_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::resize_width() const {
  // @@protoc_insertion_point(field_get:BEVConfig.resize_width)
  return _internal_resize_width();
}
inline void BEVConfig::_internal_set_resize_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  resize_width_ = value;
}
inline void BEVConfig::set_resize_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resize_width(value);
  // @@protoc_insertion_point(field_set:BEVConfig.resize_width)
}

// optional uint32 input_offset_x = 6 [default = 0];
inline bool BEVConfig::_internal_has_input_offset_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BEVConfig::has_input_offset_x() const {
  return _internal_has_input_offset_x();
}
inline void BEVConfig::clear_input_offset_x() {
  input_offset_x_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_input_offset_x() const {
  return input_offset_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::input_offset_x() const {
  // @@protoc_insertion_point(field_get:BEVConfig.input_offset_x)
  return _internal_input_offset_x();
}
inline void BEVConfig::_internal_set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  input_offset_x_ = value;
}
inline void BEVConfig::set_input_offset_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_offset_x(value);
  // @@protoc_insertion_point(field_set:BEVConfig.input_offset_x)
}

// optional uint32 input_offset_y = 7 [default = 0];
inline bool BEVConfig::_internal_has_input_offset_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BEVConfig::has_input_offset_y() const {
  return _internal_has_input_offset_y();
}
inline void BEVConfig::clear_input_offset_y() {
  input_offset_y_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_input_offset_y() const {
  return input_offset_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::input_offset_y() const {
  // @@protoc_insertion_point(field_get:BEVConfig.input_offset_y)
  return _internal_input_offset_y();
}
inline void BEVConfig::_internal_set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  input_offset_y_ = value;
}
inline void BEVConfig::set_input_offset_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_offset_y(value);
  // @@protoc_insertion_point(field_set:BEVConfig.input_offset_y)
}

// optional uint32 input_channel = 8 [default = 3];
inline bool BEVConfig::_internal_has_input_channel() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BEVConfig::has_input_channel() const {
  return _internal_has_input_channel();
}
inline void BEVConfig::clear_input_channel() {
  input_channel_ = 3u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::_internal_input_channel() const {
  return input_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BEVConfig::input_channel() const {
  // @@protoc_insertion_point(field_get:BEVConfig.input_channel)
  return _internal_input_channel();
}
inline void BEVConfig::_internal_set_input_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  input_channel_ = value;
}
inline void BEVConfig::set_input_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_input_channel(value);
  // @@protoc_insertion_point(field_set:BEVConfig.input_channel)
}

// optional float mean_b = 9 [default = 95];
inline bool BEVConfig::_internal_has_mean_b() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BEVConfig::has_mean_b() const {
  return _internal_has_mean_b();
}
inline void BEVConfig::clear_mean_b() {
  mean_b_ = 95;
  _has_bits_[0] &= ~0x00000800u;
}
inline float BEVConfig::_internal_mean_b() const {
  return mean_b_;
}
inline float BEVConfig::mean_b() const {
  // @@protoc_insertion_point(field_get:BEVConfig.mean_b)
  return _internal_mean_b();
}
inline void BEVConfig::_internal_set_mean_b(float value) {
  _has_bits_[0] |= 0x00000800u;
  mean_b_ = value;
}
inline void BEVConfig::set_mean_b(float value) {
  _internal_set_mean_b(value);
  // @@protoc_insertion_point(field_set:BEVConfig.mean_b)
}

// optional float mean_g = 10 [default = 99];
inline bool BEVConfig::_internal_has_mean_g() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BEVConfig::has_mean_g() const {
  return _internal_has_mean_g();
}
inline void BEVConfig::clear_mean_g() {
  mean_g_ = 99;
  _has_bits_[0] &= ~0x00001000u;
}
inline float BEVConfig::_internal_mean_g() const {
  return mean_g_;
}
inline float BEVConfig::mean_g() const {
  // @@protoc_insertion_point(field_get:BEVConfig.mean_g)
  return _internal_mean_g();
}
inline void BEVConfig::_internal_set_mean_g(float value) {
  _has_bits_[0] |= 0x00001000u;
  mean_g_ = value;
}
inline void BEVConfig::set_mean_g(float value) {
  _internal_set_mean_g(value);
  // @@protoc_insertion_point(field_set:BEVConfig.mean_g)
}

// optional float mean_r = 11 [default = 96];
inline bool BEVConfig::_internal_has_mean_r() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BEVConfig::has_mean_r() const {
  return _internal_has_mean_r();
}
inline void BEVConfig::clear_mean_r() {
  mean_r_ = 96;
  _has_bits_[0] &= ~0x00002000u;
}
inline float BEVConfig::_internal_mean_r() const {
  return mean_r_;
}
inline float BEVConfig::mean_r() const {
  // @@protoc_insertion_point(field_get:BEVConfig.mean_r)
  return _internal_mean_r();
}
inline void BEVConfig::_internal_set_mean_r(float value) {
  _has_bits_[0] |= 0x00002000u;
  mean_r_ = value;
}
inline void BEVConfig::set_mean_r(float value) {
  _internal_set_mean_r(value);
  // @@protoc_insertion_point(field_set:BEVConfig.mean_r)
}

// optional float std_b = 12 [default = 96];
inline bool BEVConfig::_internal_has_std_b() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BEVConfig::has_std_b() const {
  return _internal_has_std_b();
}
inline void BEVConfig::clear_std_b() {
  std_b_ = 96;
  _has_bits_[0] &= ~0x00004000u;
}
inline float BEVConfig::_internal_std_b() const {
  return std_b_;
}
inline float BEVConfig::std_b() const {
  // @@protoc_insertion_point(field_get:BEVConfig.std_b)
  return _internal_std_b();
}
inline void BEVConfig::_internal_set_std_b(float value) {
  _has_bits_[0] |= 0x00004000u;
  std_b_ = value;
}
inline void BEVConfig::set_std_b(float value) {
  _internal_set_std_b(value);
  // @@protoc_insertion_point(field_set:BEVConfig.std_b)
}

// optional float std_g = 13 [default = 96];
inline bool BEVConfig::_internal_has_std_g() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BEVConfig::has_std_g() const {
  return _internal_has_std_g();
}
inline void BEVConfig::clear_std_g() {
  std_g_ = 96;
  _has_bits_[0] &= ~0x00008000u;
}
inline float BEVConfig::_internal_std_g() const {
  return std_g_;
}
inline float BEVConfig::std_g() const {
  // @@protoc_insertion_point(field_get:BEVConfig.std_g)
  return _internal_std_g();
}
inline void BEVConfig::_internal_set_std_g(float value) {
  _has_bits_[0] |= 0x00008000u;
  std_g_ = value;
}
inline void BEVConfig::set_std_g(float value) {
  _internal_set_std_g(value);
  // @@protoc_insertion_point(field_set:BEVConfig.std_g)
}

// optional float std_r = 14 [default = 96];
inline bool BEVConfig::_internal_has_std_r() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BEVConfig::has_std_r() const {
  return _internal_has_std_r();
}
inline void BEVConfig::clear_std_r() {
  std_r_ = 96;
  _has_bits_[0] &= ~0x00010000u;
}
inline float BEVConfig::_internal_std_r() const {
  return std_r_;
}
inline float BEVConfig::std_r() const {
  // @@protoc_insertion_point(field_get:BEVConfig.std_r)
  return _internal_std_r();
}
inline void BEVConfig::_internal_set_std_r(float value) {
  _has_bits_[0] |= 0x00010000u;
  std_r_ = value;
}
inline void BEVConfig::set_std_r(float value) {
  _internal_set_std_r(value);
  // @@protoc_insertion_point(field_set:BEVConfig.std_r)
}

// optional bool is_bgr = 15 [default = true];
inline bool BEVConfig::_internal_has_is_bgr() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BEVConfig::has_is_bgr() const {
  return _internal_has_is_bgr();
}
inline void BEVConfig::clear_is_bgr() {
  is_bgr_ = true;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool BEVConfig::_internal_is_bgr() const {
  return is_bgr_;
}
inline bool BEVConfig::is_bgr() const {
  // @@protoc_insertion_point(field_get:BEVConfig.is_bgr)
  return _internal_is_bgr();
}
inline void BEVConfig::_internal_set_is_bgr(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_bgr_ = value;
}
inline void BEVConfig::set_is_bgr(bool value) {
  _internal_set_is_bgr(value);
  // @@protoc_insertion_point(field_set:BEVConfig.is_bgr)
}

// optional float confidence_threshold = 16 [default = 0.5];
inline bool BEVConfig::_internal_has_confidence_threshold() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BEVConfig::has_confidence_threshold() const {
  return _internal_has_confidence_threshold();
}
inline void BEVConfig::clear_confidence_threshold() {
  confidence_threshold_ = 0.5f;
  _has_bits_[0] &= ~0x00000080u;
}
inline float BEVConfig::_internal_confidence_threshold() const {
  return confidence_threshold_;
}
inline float BEVConfig::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:BEVConfig.confidence_threshold)
  return _internal_confidence_threshold();
}
inline void BEVConfig::_internal_set_confidence_threshold(float value) {
  _has_bits_[0] |= 0x00000080u;
  confidence_threshold_ = value;
}
inline void BEVConfig::set_confidence_threshold(float value) {
  _internal_set_confidence_threshold(value);
  // @@protoc_insertion_point(field_set:BEVConfig.confidence_threshold)
}

// optional int32 gpu_id = 17 [default = 0];
inline bool BEVConfig::_internal_has_gpu_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BEVConfig::has_gpu_id() const {
  return _internal_has_gpu_id();
}
inline void BEVConfig::clear_gpu_id() {
  gpu_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEVConfig::_internal_gpu_id() const {
  return gpu_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BEVConfig::gpu_id() const {
  // @@protoc_insertion_point(field_get:BEVConfig.gpu_id)
  return _internal_gpu_id();
}
inline void BEVConfig::_internal_set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  gpu_id_ = value;
}
inline void BEVConfig::set_gpu_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpu_id(value);
  // @@protoc_insertion_point(field_set:BEVConfig.gpu_id)
}

// optional .NetConfig net_config = 18;
inline bool BEVConfig::_internal_has_net_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || net_config_ != nullptr);
  return value;
}
inline bool BEVConfig::has_net_config() const {
  return _internal_has_net_config();
}
inline void BEVConfig::clear_net_config() {
  if (net_config_ != nullptr) net_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::NetConfig& BEVConfig::_internal_net_config() const {
  const ::NetConfig* p = net_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::NetConfig&>(
      ::_NetConfig_default_instance_);
}
inline const ::NetConfig& BEVConfig::net_config() const {
  // @@protoc_insertion_point(field_get:BEVConfig.net_config)
  return _internal_net_config();
}
inline void BEVConfig::unsafe_arena_set_allocated_net_config(
    ::NetConfig* net_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(net_config_);
  }
  net_config_ = net_config;
  if (net_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BEVConfig.net_config)
}
inline ::NetConfig* BEVConfig::release_net_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::NetConfig* temp = net_config_;
  net_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NetConfig* BEVConfig::unsafe_arena_release_net_config() {
  // @@protoc_insertion_point(field_release:BEVConfig.net_config)
  _has_bits_[0] &= ~0x00000002u;
  ::NetConfig* temp = net_config_;
  net_config_ = nullptr;
  return temp;
}
inline ::NetConfig* BEVConfig::_internal_mutable_net_config() {
  _has_bits_[0] |= 0x00000002u;
  if (net_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::NetConfig>(GetArena());
    net_config_ = p;
  }
  return net_config_;
}
inline ::NetConfig* BEVConfig::mutable_net_config() {
  // @@protoc_insertion_point(field_mutable:BEVConfig.net_config)
  return _internal_mutable_net_config();
}
inline void BEVConfig::set_allocated_net_config(::NetConfig* net_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete net_config_;
  }
  if (net_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(net_config);
    if (message_arena != submessage_arena) {
      net_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, net_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  net_config_ = net_config;
  // @@protoc_insertion_point(field_set_allocated:BEVConfig.net_config)
}

// -------------------------------------------------------------------

// BEVDet

// optional .BEVConfig part1_config = 1;
inline bool BEVDet::_internal_has_part1_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || part1_config_ != nullptr);
  return value;
}
inline bool BEVDet::has_part1_config() const {
  return _internal_has_part1_config();
}
inline void BEVDet::clear_part1_config() {
  if (part1_config_ != nullptr) part1_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::BEVConfig& BEVDet::_internal_part1_config() const {
  const ::BEVConfig* p = part1_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::BEVConfig&>(
      ::_BEVConfig_default_instance_);
}
inline const ::BEVConfig& BEVDet::part1_config() const {
  // @@protoc_insertion_point(field_get:BEVDet.part1_config)
  return _internal_part1_config();
}
inline void BEVDet::unsafe_arena_set_allocated_part1_config(
    ::BEVConfig* part1_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part1_config_);
  }
  part1_config_ = part1_config;
  if (part1_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BEVDet.part1_config)
}
inline ::BEVConfig* BEVDet::release_part1_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::BEVConfig* temp = part1_config_;
  part1_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BEVConfig* BEVDet::unsafe_arena_release_part1_config() {
  // @@protoc_insertion_point(field_release:BEVDet.part1_config)
  _has_bits_[0] &= ~0x00000001u;
  ::BEVConfig* temp = part1_config_;
  part1_config_ = nullptr;
  return temp;
}
inline ::BEVConfig* BEVDet::_internal_mutable_part1_config() {
  _has_bits_[0] |= 0x00000001u;
  if (part1_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BEVConfig>(GetArena());
    part1_config_ = p;
  }
  return part1_config_;
}
inline ::BEVConfig* BEVDet::mutable_part1_config() {
  // @@protoc_insertion_point(field_mutable:BEVDet.part1_config)
  return _internal_mutable_part1_config();
}
inline void BEVDet::set_allocated_part1_config(::BEVConfig* part1_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete part1_config_;
  }
  if (part1_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(part1_config);
    if (message_arena != submessage_arena) {
      part1_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part1_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  part1_config_ = part1_config;
  // @@protoc_insertion_point(field_set_allocated:BEVDet.part1_config)
}

// optional .BEVConfig part2_config = 2;
inline bool BEVDet::_internal_has_part2_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || part2_config_ != nullptr);
  return value;
}
inline bool BEVDet::has_part2_config() const {
  return _internal_has_part2_config();
}
inline void BEVDet::clear_part2_config() {
  if (part2_config_ != nullptr) part2_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::BEVConfig& BEVDet::_internal_part2_config() const {
  const ::BEVConfig* p = part2_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::BEVConfig&>(
      ::_BEVConfig_default_instance_);
}
inline const ::BEVConfig& BEVDet::part2_config() const {
  // @@protoc_insertion_point(field_get:BEVDet.part2_config)
  return _internal_part2_config();
}
inline void BEVDet::unsafe_arena_set_allocated_part2_config(
    ::BEVConfig* part2_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part2_config_);
  }
  part2_config_ = part2_config;
  if (part2_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BEVDet.part2_config)
}
inline ::BEVConfig* BEVDet::release_part2_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::BEVConfig* temp = part2_config_;
  part2_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BEVConfig* BEVDet::unsafe_arena_release_part2_config() {
  // @@protoc_insertion_point(field_release:BEVDet.part2_config)
  _has_bits_[0] &= ~0x00000002u;
  ::BEVConfig* temp = part2_config_;
  part2_config_ = nullptr;
  return temp;
}
inline ::BEVConfig* BEVDet::_internal_mutable_part2_config() {
  _has_bits_[0] |= 0x00000002u;
  if (part2_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::BEVConfig>(GetArena());
    part2_config_ = p;
  }
  return part2_config_;
}
inline ::BEVConfig* BEVDet::mutable_part2_config() {
  // @@protoc_insertion_point(field_mutable:BEVDet.part2_config)
  return _internal_mutable_part2_config();
}
inline void BEVDet::set_allocated_part2_config(::BEVConfig* part2_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete part2_config_;
  }
  if (part2_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(part2_config);
    if (message_arena != submessage_arena) {
      part2_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part2_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  part2_config_ = part2_config;
  // @@protoc_insertion_point(field_set_allocated:BEVDet.part2_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bevdet_2eproto
